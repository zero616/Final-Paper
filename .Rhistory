library(stringr)
library(rvest)
library(dplyr)
library(tidyverse)
# Set the URL for the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia"
# Read the HTML content of the page
webpage <- read_html(url)
# Updated XPath expression to target the correct table
table <- webpage |> html_element(".wikitable") |>
html_table()
table <- table[-1, ]
table <-
webpage |>
clean_names() |>
rename(raw_text = prime_minister_office_lifespan) |>
select(raw_text) |>
filter(raw_text != "Prime ministerOffice(Lifespan)") |>
distinct()
# Install and load necessary packages
library(stringr)
library(rvest)
library(dplyr)
library(tidyverse)
# Set the URL for the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia"
# Read the HTML content of the page
webpage <- read_html(url)
# Updated XPath expression to target the correct table
table <- webpage |> html_element(".wikitable") |>
html_table()
table <- table[-1, ]
# Install and load necessary packages
library(stringr)
library(rvest)
library(dplyr)
library(tidyverse)
# Set the URL for the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia"
# Read the HTML content of the page
webpage <- read_html(url)
# Updated XPath expression to target the correct table
table <- webpage |> html_element(".wikitable") |>
html_table()
table <- table[-1, ]
head(table)
table <-
webpage |>
clean_names() |>
rename(raw_text = prime_minister_office_lifespan) |>
select(raw_text) |>
filter(raw_text != "Prime ministerOffice(Lifespan)") |>
distinct()
table_cleaned <-
table |>
clean_names() |>
rename(raw_text = prime_minister_office_lifespan) |>
select(raw_text) |>
filter(raw_text != "Prime ministerOffice(Lifespan)") |>
distinct()
# Install and load necessary packages
library(stringr)
library(rvest)
library(dplyr)
library(tidyverse)
# Set the URL for the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia"
# Read the HTML content of the page
webpage <- read_html(url)
# Updated XPath expression to target the correct table
table <- webpage |> html_element(".wikitable") |>
html_table()
table <- table[-1, ]
head(table)
table_cleaned <-
table |>
clean_names() |>
rename(raw_text = Name(Birth–Death)Constituency) |>
table_cleaned <-
table |>
clean_names() |>
rename(raw_text = "Name(Birth–Death)Constituency)" |>
select(raw_text) |>
filter(raw_text != "Name(Birth–Death)Constituency") |>
distinct()
head(parsed_data)
table_cleaned <-
table |>
clean_names() |>
rename(raw_text = `Name(Birth–Death)Constituency` |>
select(raw_text) |>
filter(raw_text != "Name(Birth–Death)Constituency") |>
distinct()
head(parsed_data)
table_cleaned <-
table |>
clean_names() |>
rename(raw_text = `Name(Birth–Death)Constituency` |>
select(raw_text) |>
filter(raw_text != "Name(Birth–Death)Constituency") |>
distinct()
head(table_cleaned)
table_cleaned <-
table |>
clean_names() |>
rename(raw_text = `Name(Birth–Death)Constituency`) |>
select(raw_text) |>
filter(raw_text != "Name(Birth–Death)Constituency") |>
distinct()
# Install and load necessary packages
library(stringr)
library(rvest)
library(dplyr)
library(tidyverse)
# Set the URL for the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia"
# Read the HTML content of the page
webpage <- read_html(url)
# Updated XPath expression to target the correct table
table <- webpage |> html_element(".wikitable") |>
html_table()
table <- table[-1, ]
head(table)
table_cleaned <-
table |>
clean_names() |>
rename(raw_text = `Name(Birth–Death)Constituency`) |>
select(raw_text) |>
filter(raw_text != "Name(Birth–Death)Constituency") |>
distinct()
table_cleaned <-
table |>
rename(raw_text = `Name(Birth–Death)Constituency`) |>
select(raw_text) |>
filter(raw_text != "Name(Birth–Death)Constituency") |>
distinct()
table_cleaned <-
table |>
clean_names() |>
rename(raw_text = `Name(Birth–Death)Constituency`) |>
select(raw_text) |>
filter(raw_text != "Name(Birth–Death)Constituency") |>
distinct()
table_cleaned <-
table |>
clean_names() |>
rename(raw_text = `Name(Birth–Death)Constituency`) |>
select(raw_text) |>
filter(raw_text != "Name(Birth–Death)Constituency") |>
distinct()
View(table)
# Install and load necessary packages
library(stringr)
library(rvest)
library(dplyr)
library(tidyverse)
# Set the URL for the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia"
# Read the HTML content of the page
webpage <- read_html(url)
# Updated XPath expression to target the correct table
table <- webpage |> html_element(".wikitable") |>
html_table()
table <- table[-1, ]
head(table)
table_cleaned <-
table |>
clean_names() |>
rename(raw_text = `Name(Birth–Death)Constituency`) |>
select(raw_text) |>
filter(raw_text != "Name(Birth–Death)Constituency") |>
distinct()
table_cleaned <-
table |>
clean_names() |>
rename(raw_text = `Name(Birth–Death)Constituency`) |>
select(raw_text) |>
filter(raw_text != "Name(Birth–Death)Constituency") |>
distinct()
# Clean column names
colnames(table) <- table[1, ] %>%
str_replace_all("[^[:alnum:]]", "_") %>%
tolower()
# Remove the first row (column names) and clean data
table_cleaned <- table[-1, ] |>
clean_names() |>
select(name_birth_death_constituency) |>
filter(name_birth_death_constituency != "Name_Birth_Death_Constituency") |>
distinct()
# Clean column names
colnames(table) <- table[1, ] %>%
str_replace_all("[^[:alnum:]]", "_") %>%
tolower()
# Remove the first row (column names) and clean data
# Install and load necessary packages
library(stringr)
library(rvest)
library(dplyr)
library(tidyverse)
# Set the URL for the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia"
# Read the HTML content of the page
webpage <- read_html(url)
# Updated XPath expression to target the correct table
table <- webpage |> html_element(".wikitable") |>
html_table()
head(table)
# Clean column names
colnames(table) <- table[1, ] %>%
str_replace_all("[^[:alnum:]]", "_") %>%
tolower()
# Remove the first row (column names) and clean data
# Clean column names
colnames(table) <- table[1, ] %>%
str_replace_all("[^[:alnum:]]", "_") %>%
tolower()
# Remove the first row (column names) and clean data
# Install and load necessary packages
library(stringr)
library(rvest)
library(dplyr)
library(tidyverse)
# Set the URL for the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia"
# Read the HTML content of the page
webpage <- read_html(url)
# Updated XPath expression to target the correct table
table <- webpage |> html_element(".wikitable") |>
html_table()
table <- table[-1, ]
head(table)
# Clean column names
colnames(table) <- table[1, ] %>%
str_replace_all("[^[:alnum:]]", "_") %>%
tolower()
# Remove the first row (column names) and clean data
# Install and load necessary packages
library(stringr)
library(rvest)
library(dplyr)
library(tidyverse)
# Set the URL for the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia"
# Read the HTML content of the page
webpage <- read_html(url)
# Updated XPath expression to target the correct table
table <- webpage |> html_element(".wikitable") |>
html_table()
head(table)
# Clean column names
colnames(table) <- table[1, ] %>%
str_replace_all("[^[:alnum:]]", "_") %>%
tolower()
# Remove the first row (column names) and clean data
table_cleaned <- table[-1, ] |>
clean_names() |>
select(name_birth_death_constituency) |>
filter(name_birth_death_constituency != "Name_Birth_Death_Constituency") |>
distinct()
head(table_cleaned)
initial_clean <-
parsed_data |>
separate(
raw_text, into = c("name", "not_name"), sep = "\\[", extra = "merge",
) |>
mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
born = str_extract(not_name, "born[[:space:]][[:digit:]]{4}")
) |>
select(name, date, born)
initial_clean <-
table_cleaned |>
separate(
raw_text, into = c("name", "not_name"), sep = "\\[", extra = "merge",
) |>
mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
born = str_extract(not_name, "born[[:space:]][[:digit:]]{4}")
) |>
select(name, date, born)
initial_clean <-
table_cleaned |>
separate(
name_birth_death_constituency, into = c("name", "not_name"), sep = "\\[", extra = "merge",
) |>
mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
born = str_extract(not_name, "born[[:space:]][[:digit:]]{4}")
) |>
select(name, date, born)
head(initial_clean)
initial_clean <-
table_cleaned |>
separate(
name_birth_death_constituency, into = c("name", "not_name"), sep = "\\[", extra = "merge",
) |>
mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
born = str_extract(not_name, "born[[:space:]]([[:digit:]]{4})")
) |>
select(name, date, born)
head(initial_clean)
initial_clean <-
table_cleaned |>
separate(
name_birth_death_constituency, into = c("name", "not_name"), sep = "\\[", extra = "merge",
) |>
mutate(
name <- str_extract(string, "^[^(]+"),
date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
born = str_extract(not_name, "born[[:space:]]([[:digit:]]{4})")
) |>
select(name, date, born)
initial_clean <-
table_cleaned |>
separate(
name_birth_death_constituency, into = c("name", "not_name"), sep = "\\[", extra = "merge",
) |>
mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
born = str_extract(not_name, "born[[:space:]]([[:digit:]]{4})")
) |>
select(name, date, born)
head(initial_clean)
initial_clean <-
table_cleaned |>
separate(
name_birth_death_constituency, into = c("name", "not_name"), sep = "\\(", extra = "merge",
) |>
mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
born = str_extract(not_name, "born[[:space:]]([[:digit:]]{4})")
) |>
select(name, date, born)
head(initial_clean)
initial_clean <-
table_cleaned |>
separate(
name_birth_death_constituency, into = c("name", "not_name"), sep = "\\(", extra = "merge",
) |>
mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
born = str_extract(not_name, "born[[:space:]][[:digit:]]{4}")
) |>
select(name, date, born)
head(initial_clean)
cleaned_data <-
initial_clean |>
separate(date, into = c("birth", "died"),
sep = "–") |>   # PMs who have died have their birth and death years
# separated by a hyphen, but we need to be careful with the hyphen as it seems
# to be a slightly odd type of hyphen and we need to copy/paste it.
mutate(
born = str_remove_all(born, "born[[:space:]]"),
birth = if_else(!is.na(born), born, birth)
) |> # Alive PMs have slightly different format
select(-born) |>
rename(born = birth) |>
mutate(across(c(born, died), as.integer)) |>
mutate(Age_at_Death = died - born) |>
distinct() # Some of the PMs had two goes at it.
head(cleaned_data)
View(cleaned_data)
initial_clean <-
table_cleaned |>
separate(
name_birth_death_constituency, into = c("name", "not_name"), sep = "\\(", extra = "merge",
) |>
mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
born = str_extract(not_name, "b.[[:space:]][[:digit:]]{4}")
) |>
select(name, date, born)
head(initial_clean)
cleaned_data <-
initial_clean |>
separate(date, into = c("birth", "died"),
sep = "–") |>   # PMs who have died have their birth and death years
# separated by a hyphen, but we need to be careful with the hyphen as it seems
# to be a slightly odd type of hyphen and we need to copy/paste it.
mutate(
born = str_remove_all(born, "born[[:space:]]"),
birth = if_else(!is.na(born), born, birth)
) |> # Alive PMs have slightly different format
select(-born) |>
rename(born = birth) |>
mutate(across(c(born, died), as.integer)) |>
mutate(Age_at_Death = died - born) |>
distinct() # Some of the PMs had two goes at it.
head(cleaned_data)
initial_clean <-
table_cleaned |>
separate(
name_birth_death_constituency, into = c("name", "not_name"), sep = "\\(", extra = "merge",
) |>
mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
born = str_extract(not_name, "b.[[:space:]][[:digit:]]{4}")
) |>
select(name, date, born)
(initial_clean)
cleaned_data <-
initial_clean |>
separate(date, into = c("birth", "died"),
sep = "–") |>   # PMs who have died have their birth and death years
# separated by a hyphen, but we need to be careful with the hyphen as it seems
# to be a slightly odd type of hyphen and we need to copy/paste it.
mutate(
born = str_remove_all(born, "b.[[:space:]]"),
birth = if_else(!is.na(born), born, birth)
) |> # Alive PMs have slightly different format
select(-born) |>
rename(born = birth) |>
mutate(across(c(born, died), as.integer)) |>
mutate(Age_at_Death = died - born) |>
distinct() # Some of the PMs had two goes at it.
head(cleaned_data)
cleaned_data |>
mutate(
still_alive = if_else(is.na(died), "Yes", "No"),
died = if_else(is.na(died), as.integer(2023), died)
) |>
mutate(name = as_factor(name)) |>
ggplot(
aes(x = born, xend = died, y = name, yend = name, color = still_alive)
) +
geom_segment() +
labs(
x = "Year of birth", y = "Prime minister", color = "PM is currently alive"
) +
theme_minimal() +
scale_color_brewer(palette = "Set1") +
theme(legend.position = "bottom")
# Install and load necessary packages
library(stringr)
library(rvest)
library(dplyr)
library(tidyverse)
# Set the URL for the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia"
# Read the HTML content of the page
webpage <- read_html(url)
# Updated XPath expression to target the correct table
table <- webpage |> html_element(".wikitable") |>
html_table()
head(table)
# Clean column names
colnames(table) <- table[1, ] %>%
str_replace_all("[^[:alnum:]]", "_") %>%
tolower()
# Remove the first row (column names) and clean data
table_cleaned <- table[-1, ] |>
clean_names() |>
select(name_birth_death_constituency) |>
filter(name_birth_death_constituency != "Name_Birth_Death_Constituency") |>
distinct()
head(table_cleaned)
initial_clean <-
table_cleaned |>
separate(
name_birth_death_constituency, into = c("name", "not_name"), sep = "\\(", extra = "merge",
) |>
mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
born = str_extract(not_name, "b.[[:space:]][[:digit:]]{4}")
) |>
select(name, date, born)
(initial_clean)
cleaned_data <-
initial_clean |>
separate(date, into = c("birth", "died"),
sep = "–") |>   # PMs who have died have their birth and death years
# separated by a hyphen, but we need to be careful with the hyphen as it seems
# to be a slightly odd type of hyphen and we need to copy/paste it.
mutate(
born = str_remove_all(born, "b.[[:space:]]"),
birth = if_else(!is.na(born), born, birth)
) |> # Alive PMs have slightly different format
select(-born) |>
rename(born = birth) |>
mutate(across(c(born, died), as.integer)) |>
mutate(Age_at_Death = died - born) |>
distinct() # Some of the PMs had two goes at it.
head(cleaned_data)
cleaned_data |>
mutate(
still_alive = if_else(is.na(died), "Yes", "No"),
died = if_else(is.na(died), as.integer(2023), died)
) |>
mutate(name = as_factor(name)) |>
ggplot(
aes(x = born, xend = died, y = name, yend = name, color = still_alive)
) +
geom_segment() +
labs(
x = "Year of birth", y = "Prime minister", color = "PM is currently alive"
) +
theme_minimal() +
scale_color_brewer(palette = "Set1") +
theme(legend.position = "bottom")
# Install and load necessary packages
library(janitor)
library(stringr)
library(rvest)
library(dplyr)
library(tidyverse)
# Set the URL for the Wikipedia page
url <- "https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia"
# Read the HTML content of the page
webpage <- read_html(url)
# Updated XPath expression to target the correct table
table <- webpage |> html_element(".wikitable") |>
html_table()
head(table)
#| warning: false
#| message: false
#| echo: false
knitr::write_bib(c("base","stringr", "rmarkdown","janitor","tidyverse","rvest","dplyr"), "references.bib")
new_entry <- "@misc{Wikipedia_2023, url={https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Australia}, journal={Wikipedia}, publisher={Wikimedia Foundation}, year={2023}, month={Dec}}
}"
# Append the new entry to the "references.bib" file
write(new_entry, "references.bib", append = TRUE)
